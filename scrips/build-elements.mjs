import { htmlElementAttributes } from 'html-element-attributes';
import { svgElementAttributes } from 'svg-element-attributes';
import { ariaAttributes } from 'aria-attributes';
import { htmlEventAttributes } from 'html-event-attributes';
import { writeFileSync } from 'fs';
import { resolve } from 'path';
import { fileURLToPath } from 'url';
import { svgEventAttributes } from 'svg-event-attributes';

function dashToCamelCase(str) {
  const camelCase = str.replace(/-([a-z])/g, (g) => g[1].toUpperCase());
  return camelCase[0].toUpperCase() + camelCase.slice(1);
}

let htmlElementsContent = `
export declare namespace HtmlElementAttributes {
`;
let mergedHtmlElements = 'interface HtmlElements {\n';
Object.entries(htmlElementAttributes).forEach(([name, keys]) => {
  if (name === '*') {
    name = 'GenericAttributes';
  }
  const interfaceName = dashToCamelCase(name);
  const extend = name === 'GenericAttributes' ? '' : 'extends GenericAttributes';
  htmlElementsContent += `interface ${interfaceName} ${extend} {\n`;
  keys.forEach((k) => {
    htmlElementsContent += `  ['${k}']: any;\n`;
  });
  if (name === 'GenericAttributes') {
    ariaAttributes.forEach((k) => {
      htmlElementsContent += `  ['${k}']: any;\n`;
    });
    htmlEventAttributes.forEach((k) => {
      htmlElementsContent += `  ['${k}']: any;\n`;
    });
  }
  htmlElementsContent += '}\n';
  mergedHtmlElements += `  ['${name}']: ${interfaceName};\n`;
});

mergedHtmlElements += `}\n`;

htmlElementsContent += mergedHtmlElements + '}\n';

let svgElementsContent = `
export declare namespace SvgElementAttributes {
`;

mergedHtmlElements = 'interface SvgElements {\n';
Object.entries(svgElementAttributes).forEach(([name, keys]) => {
  if (name === '*') {
    name = 'GenericAttributes';
  }
  const interfaceName = dashToCamelCase(name);
  const extend = name === 'GenericAttributes' ? '' : 'extends GenericAttributes';
  svgElementsContent += `interface ${interfaceName} ${extend} {\n`;
  keys.forEach((k) => {
    svgElementsContent += `  ['${k}']: any;\n`;
  });
  if (name === 'GenericAttributes') {
    svgEventAttributes.forEach((k) => {
      svgElementsContent += `  ['${k}']: any;\n`;
    });
  }
  mergedHtmlElements += `  ['${name}']: ${interfaceName};\n`;
  svgElementsContent += `}\n`;
});

mergedHtmlElements += `}\n`;
svgElementsContent += mergedHtmlElements + '}\n';

const prefix = `//generated by scrips/build-elements.mjs\n`;
const filePath = resolve(
  fileURLToPath(import.meta.url),
  '../../packages/template/-private/elements.d.ts'
);
const content = prefix + htmlElementsContent + svgElementsContent;
writeFileSync(filePath, content);
